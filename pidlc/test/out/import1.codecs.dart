
// ******************************DO NOT EDIT********************************
// *** This file was generated by pidlc version 1.0.0
// *** on 2022-07-16 08:05:12.399779
// *** from '/p/flutter/f/EmbeddedFlutter/pluginapi/pidlc/samples/import1.idl'
// *** and contains encoders and decoders.
// ***
// *** Any edits to this file will be lost the next time it is generated.
// *** You have been warned!
// ******************************DO NOT EDIT********************************
// @dart = 2.17

import 'package:pidlrt/pidlrt.dart' as pidl;

import 'import2.types.dart' as frob;
import 'import2.codecs.dart' as codecs_frob;

const _fileVersion = pidl.FileVersion(0x7872D2F2, 0xBD77436E, 0x4C266FBA, 0x98EBA990);


void encodeDependentStruct(DependentStruct value, BinaryWriter output)
{
    output.writeString(value.is2field1);
}

DependentStruct decodeDependentStruct(BinaryReader input)
{
    final result = DependentStruct({
        is2field1: input.readString()
    );
    return result;
}
void encodeStructWithDependency(StructWithDependency value, BinaryWriter output)
{
    output.writeObject<DependentStruct>(value.struct2, encodeDependentStruct);
    output.writeInt32(value.is1field0);
    output.writeInt8(value.is1field1);
    output.writeInt16(value.is1field2);
}

StructWithDependency decodeStructWithDependency(BinaryReader input)
{
    final result = StructWithDependency({
        struct2: input.readObject<DependentStruct>(decodeDependentStruct),
        is1field0: input.readInt32(),
        is1field1: input.readInt8(),
        is1field2: input.readInt16()
    );
    return result;
}
void encodeob1(ob1 value, BinaryWriter output)
{
    output.writeString(value.ob1);
}

ob1 decodeob1(BinaryReader input)
{
    final result = ob1({
        ob1: input.readString()
    );
    return result;
}
void encodeOtherStruct(OtherStruct value, BinaryWriter output)
{
    output.writeNullableObject<DependentStruct>(value.ds1, encodeDependentStruct);
    output.writeList<StructWithDependency>(value.ds2, encodeStructWithDependency);
    output.writeObject<frob.Import2Struct>(value.is2, codecs_frob.encodeImport2Struct);
}

OtherStruct decodeOtherStruct(BinaryReader input)
{
    final result = OtherStruct({
        ds1: input.readNullableObject<DependentStruct>(decodeDependentStruct),
        ds2: input.readList<StructWithDependency>(decodeStructWithDependency),
        is2: input.readObject<frob.Import2Struct>(codecs_frob.decodeImport2Struct)
    );
    return result;
}