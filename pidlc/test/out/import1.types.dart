
// ******************************DO NOT EDIT********************************
// *** This file was generated by pidlc version 1.0.0
// *** on 2022-07-16 08:05:12.393820
// *** from '/p/flutter/f/EmbeddedFlutter/pluginapi/pidlc/samples/import1.idl'
// *** and contains type information.
// ***
// *** Any edits to this file will be lost the next time it is generated.
// *** You have been warned!
// ******************************DO NOT EDIT********************************
// @dart = 2.17.3

import 'package:pidlrt/pidlrt.dart' as pidl;

import 'import2.types.dart' as frob;

const _fileVersion = pidl.FileVersion(0x7872D2F2, 0xBD77436E, 0x4C266FBA, 0x98EBA990);



const int AConst = 0xFEEDBABE;

const String ChannelName = "freer";

class OsEnum extends pidl.BitsEnum
{
    static const traits = BitTraits.bits16

    @override
    final int value;

    const OsEnum._(this.value);

    static const os1 = OsEnum._(0x000A);
    static const os2 = OsEnum._(0x0009);
    static const os3 = OsEnum._(0x0096);

    operator|(OsEnum other) => OsEnum._((value | other.value) & bits.mask);
    operator&(OsEnum other) => OsEnum._((value & other.value) & bits.mask);
    operator~() => OsEnum._((~value) & bits.mask);
}

class DependentStruct
{
    String is2field1;

    DependentStruct({
        this.is2field1 = "hello"
    });
}

class StructWithDependency
{
    DependentStruct struct2;
    frob.Is2Enum is1field0;
    int is1field1;
    int is1field2;

    StructWithDependency({
        required this.struct2,
        required this.is1field1,
        required this.is1field2,
        this.is1field0 = frob.Is2Enum.e2
    });
}

abstract class Interface1 implements frob.BaseInterface
{
    Future<DependentStruct> method1(
    {
required StructWithDependency p1
    });

    Future<void> method2(
    {
required frob.Import2Struct p1
    });

}

abstract class Interface2 implements frob.BaseInterface
{
    Future<DependentStruct> method1(
    {
required StructWithDependency p1
    });

    Future<void> method2(
    {
required frob.Import2Struct p1
    });

}

class ob1
{
    String ob1;

    ob1({
        required this.ob1
    });
}

typedef DependentStructAlias = DependentStruct;

typedef Alias2 = List<StructWithDependency>;

class OtherStruct extends ob1
{
    DependentStructAlias? ds1;
    Alias2 ds2;
    frob.Import2Struct is2;

    OtherStruct({
        required super.ob1,
        required this.ds2,
        required this.is2,
        this.ds1
    });
}